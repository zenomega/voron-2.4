[include moonraker_obico_macros.cfg]
# This file contains common pin mappings for the BigTreeTech OctoPus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Probe pin								[probe] section
## Fine tune E steps					[extruder] section
#[include fluidd.cfg]
[include nozzle_scrub.cfg]
#[include klicky-probe.cfg]
#[include z_calibration.cfg]
[include nevermore.cfg]
#[include stealthburner_leds.cfg]
[include stealthburner_led_effects_barf.cfg]
[include ercf_hardware.cfg]
[include ercf_software.cfg]
[include adaptive_bed_mesh.cfg]
[include revo.cfg]
#[include dragon.cfg]

[mcu]
##	[X in MOTOR0] - B Motor
##	[Y in MOTOR1] - A Motor
##	[E in MOTOR6] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2A000400105053424E363620-if00
##canbus_uuid: e8cdc8ccda0a
#restart_method: command
##--------------------------------------------------------------------
[mcu sb2040]
canbus_uuid:  60e5db445ba4
#canbus_uuid:  fc92c8f04d59

#[filament_switch_sensor toolhead_sensor]
#pause_on_runout: False
# #filament sensor wired to the printer MCU
#switch_pin: ^PG11

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    125,125,50  # an example

[adxl345]
cs_pin: sb2040:gpio1
spi_software_sclk_pin: sb2040:gpio0
spi_software_mosi_pin: sb2040:gpio3
spi_software_miso_pin: sb2040:gpio2

[printer]
kinematics: corexy
max_velocity: 400  #300
#max_accel: 3000    			#Max 4000
max_accel: 7000    			#Max 4000
max_z_velocity: 30 			#Max 15 for 12V TMC Drivers, can increase for 24V
#max_z_velocity: 15 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 8.0

[force_move]
enable_force_move: true
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on MOTOR0(B Motor)
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop #!PG6
position_min: -1
##--------------------------------------------------------------------

##	Uncomment below for 250mm build
position_endstop: 0
position_max: 250

##	Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 40   #Max 100 was 25
homing_retract_dist: 0 #5
homing_positive_dir: false

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6
driver_SGTHRS: 125 # 255 is most sensitive value, 0 is least sensitive

## Y Stepper on MOTOR1 (A Motor)
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop #!PG9
position_min: -1

##--------------------------------------------------------------------

##	Uncomment for 250mm build
position_endstop: 259
position_max: 259

##	Uncomment for 300mm build
#position_endstop: 300
#position_max: 300

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 25  #Max 100 was 25
homing_retract_dist: 0 #5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 100 # 255 is most sensitive value, 0 is least sensitive

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left on MOTOR2_1
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
##endstop_pin: probe:z_virtual_endstop
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 0.720

##--------------------------------------------------------------------

##	Uncomment below for 250mm build
position_max: 240

##	Uncomment below for 300mm build
#position_max: 290

##	Uncomment below for 350mm build
#position_max: 340

##--------------------------------------------------------------------
position_min: -10
homing_speed: 5
second_homing_speed: 3
homing_retract_dist: 1.5

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z1 Stepper - Rear Left on MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z2 Stepper - Rear Right on MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 0

##	Z3 Stepper - Front Right on MOTOR5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: true
run_current: 0.8
hold_current: 0.80
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
# 	Extruder
#####################################################################

#	E0 on MOTOR6
#[extruder]
#step_pin: PE2
#dir_pin: !PE3
#enable_pin: !PD4
###	Update value below when you perform extruder calibration
###	If you ask for 100mm of filament, but in reality it is 98mm:
###	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
###  22.6789511 is a good starting point
#rotation_distance: 22.6789511	#Bondtech 5mm Drive Gears
###	Update Gear Ratio depending on your Extruder Type
###	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
###	Use 80:20 for M4, M3.1
#gear_ratio: 50:17				#BMG Gear Ratio
#microsteps: 16
#full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
#nozzle_diameter: 0.400
#filament_diameter: 1.75
#heater_pin: PA2
###	Validate the following thermistor type to make sure it is correct
##sensor_type: PT1000 #Dragon
#sensor_type: ATC Semitec 104NT-4-R025H42G  #revo
##sensor_type: NTC 100K beta 3950
#sensor_pin: PF4
#min_temp: 10
#max_temp: 300
#max_power: 1.0
#min_extrude_temp: 170
##min_extrude_temp: 10
#max_extrude_only_distance: 200
#max_extrude_cross_section: 50.0

#control = pid
#pid_kp = 37.205
#pid_ki = 5.062
#pid_kd = 68.365
##	Try to keep pressure_advance below 1.0
#pressure_advance: 0.03
#pressure_advance: 0.08
##	Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##	E0 on MOTOR6
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: sb2040:gpio8
interpolate: false
run_current: 0.5
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - BED_OUT
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PF3
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 1
min_temp: 0
max_temp: 140
[heater_bed]
control = pid
pid_kp = 36.715
pid_ki = 1.483
pid_kd = 227.176
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling

# Select the probe port by type:
## For the PROBE port; use this with the original OMRON sensor.
#pin: ~!PB7
## For the spare endstop port; use this with the Fotek PL-05N (or generic) inductive probe
pin: sb2040:gpio28 #PG11  #PG15

#--------------------------------------------------------------------

x_offset: 0
y_offset: 0
#z_offset: 0
speed: 10.0
lift_speed: 30
samples: 3 #was 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
#samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
# 	Fan Control
#####################################################################

[fan]
##	Print Cooling Fan - CNC_FAN0
pin: sb2040:gpio13
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##	Hotend Fan - CNC_FAN1
pin: sb2040:gpio14
max_power: 1.0
#shutdown_speed: 0.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 0.8

#[heater_fan controller_fan]
##	Controller fan - CNC_FAN2
#pin: PD13
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0

#[heater_fan controller_fan2]
##	Controller fan - CNC_FAN2
#pin: PD14
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0

#[heater_fan exhaust_fan]
##	Exhaust fan - CNC_FAN3
#pin: PD12
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 0.5
#[multi_pin controller_pin]
#pins: PD13,PD14

[fan_generic exhaust_fan]
pin:PD12
max_power: 1.0
shutdown_speed: 0.0


[controller_fan SB2040_Fan]
pin: sb2040:gpio15
stepper: extruder


#[fan_generic controller_fan]
#pin=multi_pin:controller_pin
#max_power: 1.0
#shutdown_speed: 0.0

[controller_fan controller_fan]
#pin=multi_pin:controller_pin
pin: PD14
max_power: 1.0
shutdown_speed: 0.0
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
#idle_timeout:
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
#idle_speed:
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
heater: heater_bed
#stepper:
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.

#[fan_generic nevermore] #in nevermore.cfg
#pin:PD15
#max_power: 1.0
#shutdown_speed: 0.0




#[thermistor chamber_temp]
#temperature1: 25
#resistance1: 10000
#beta: 3950

#[temperature_sensor chamber]
#sensor_type: chamber_temp
#sensor_pin: PF5

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor FLY-SB2040]
sensor_type: temperature_mcu
sensor_mcu: sb2040

## SB2040板载NTC100K温度
[temperature_sensor Chamber]
sensor_type = ATC Semitec 104GT-2
sensor_pin = sb2040:gpio26
min_temp: -50
max_temp: 350

#####################################################################
# 	LED Control
#####################################################################

#[output_pin caselight]
# Chamber Lighting - HE1 Connector (Optional)
#pin: PA3
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

[neopixel led_strip]
pin:PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:69
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
#initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.
#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

#[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
#home_xy_position:130,130
#speed:100
#z_hop:10

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}


[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

#--------------------------------------------------------------------
##	Gantry Corners for 250mm Build
##	Uncomment for 250mm build
gantry_corners:
	-60,-10
	310, 320 
##	Probe points
points:
	25,25
	25,225
	225,225
	225,25
	
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
#gantry_corners:
#	-60,-10
#	360,370
##	Probe points
#points:
#	50,25
#	50,225
#	250,225
#	250,25

##	Gantry Corners for 350mm Build
##	Uncomment for 350mm build
#gantry_corners:
#	-60,-10
#	410,420
##	Probe points
#points:
#	50,25
#	50,275
#	300,275
#	300,25

#--------------------------------------------------------------------
speed: 400
horizontal_move_z: 10  #was 10
retries: 10
retry_tolerance: 0.0075
max_adjust: 10

[gcode_arcs]
resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
# 	Displays
#####################################################################

## 	Uncomment the display that you have
#--------------------------------------------------------------------

#[display]
##	RepRapDiscount 128x64 Full Graphic Smart Controller
#lcd_type: st7920
#cs_pin: EXP1_4
#sclk_pin: EXP1_5
#sid_pin: EXP1_3
#menu_timeout: 40
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2

#[output_pin beeper]
#pin: EXP1_1

#--------------------------------------------------------------------

[display]
##	mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

#[neopixel btt_mini12864]
#	To control Neopixel RGB in mini12864 display
#pin: EXP1_6
#chain_count: 3
#initial_RED: 0.5
#initial_GREEN: 0.1
#initial_BLUE: 0.0
#color_order: RGB

#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

#[filament_motion_sensor btt_smartie]
#detection_length: 10.0
#extruder: extruder
#switch_pin: !PG12
#runout_gcode: 
#  LED_FLASH_RED COUNT=2
#  PAUSE

[bed_mesh]
speed: 300
horizontal_move_z: 3 #was 10
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
mesh_min: 10, 10
mesh_max: 240,240

##	Uncomment for 300mm build
#mesh_min: 40, 40
#mesh_max: 260,260

##	Uncomment for 350mm build
#mesh_min: 40, 40
#mesh_max: 310,310
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 13,13
algorithm:  bicubic #lagrange
relative_reference_index: 12

#####################################################################
# 	Macros
#####################################################################

[virtual_sdcard]
#path: ~/gcode_files
path: /home/pi/printer_data/gcodes

[pause_resume]
[exclude_object]
#[include timelapse.cfg]
[display_status]

[gcode_macro FILAMENT_SENSOR_ENABLE]
description: Cancel the actual running print
gcode:
    #SET_FILAMENT_SENSOR SENSOR=btt_smartie ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro FILAMENT_SENSOR_DISABLE]
description: Cancel the actual running print
gcode:
    #SET_FILAMENT_SENSOR SENSOR=btt_smartie ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    STATUS_READY

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    STATUS_BUSY
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 15.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    FILAMENT_SENSOR_DISABLE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
      LED_WHITE
      STATUS_PRINTING
      ##### read E from pause macro #####
      {% set E = printer["gcode_macro PAUSE"].extrude|float %}
      #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
      ##### end of definitions #####
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{E} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}  
      G90
      RESUME_BASE {get_params}
      FILAMENT_SENSOR_ENABLE
      G90
    {% endif %}


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    STATUS_HOMING
    G28
    #ATTACH_PROBE_LOCK
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    #DOCK_PROBE_UNLOCK
    #STATUS_CLEANING
    STATUS_CALIBRATING_Z
    CALIBRATE_Z
    #DOCK_PROBE_UNLOCK
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_swapcounter:               0
variable_newcounter:                0
variable_failcounter:               0
variable_newfailcounter:            0
variable_probing:False
gcode:
    #SET_FAN_SPEED FAN=controller_fan SPEED=0.4
    #{% set target  = params.BED_TEMP|int %}
    #{% set toolTemp = params.TOOL_TEMP %}
        # Start bed heating and continue
    CLEAR_PAUSE
    FILAMENT_SENSOR_DISABLE
    LED_HEATER
    BED_MESH_CLEAR
    ##LED_RED
    STATUS_HEATING
    G28
    M140 S{params.BED_TEMP|float}
    {% if printer.heater_bed.temperature < params.BED_TEMP|float*0.85 %}
        M190 S{params.BED_TEMP|float*0.9} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    LED_GREEN
    M140 S{params.BED_TEMP|float} 
    M109 S150
#M104 S{params.EXTRUDER_TEMP|float}
    M190 S{params.BED_TEMP|float}
    LED_WHITE
    #M104 S100 ; preheat extruder to no ooze temp
    #M140 S{BED_TEMP} ; set bed temp
    #M190 S{target - 10} ; wait for bed final temp
   # M104 S{EXTRUDER_TEMP} ; set extruder final temp
    #M190 S{BED_TEMP} ; wait for bed final temp
    BED_MESH_CLEAR
    STATUS_HOMING
    #G28
    #G28 X
    #G90
    #G0 X180  F7200
    #G28 Y
    #G28 Z
    WIPE_NOZZLE
    #G28
    #ATTACH_PROBE_LOCK
    STATUS_LEVELING
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=probing VALUE=True
    QUAD_GANTRY_LEVEL
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=probing VALUE=False
    G28 Z
    #STATUS_CLEANING
    #M109 S{params.EXTRUDER_TEMP|float}; wait for extruder final temp
    #STATUS_CALIBRATING_Z
    #{% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=probing VALUE=True
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    #{% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
    #CALIBRATE_Z BED_POSITION={mesh_center}
    #CALIBRATE_WITH_VARIABLES
    ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=probing VALUE=True
    #DOCK_PROBE_UNLOCK
    #G32                            ; home all axes
    #M109 S{params.EXTRUDER_TEMP|float}; wait for extruder final temp
    #G1 Z20 F3000                   ; move nozzle away from bed
    G90
    G0 X70 Y255 Z30 F7200

    M109 S{params.EXTRUDER_TEMP|float}; wait for extruder final temp
    FILAMENT_SENSOR_ENABLE
    STATUS_PRINTING
    #BED_MESH_PROFILE LOAD=default


[gcode_macro CALIBRATE_WITH_VARIABLES]
gcode:
    {% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
    CALIBRATE_Z BED_POSITION={mesh_center}

[gcode_macro START_PRINT]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    PRINT_START  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    #G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    FILAMENT_SENSOR_DISABLE
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F7200            ; park nozzle at rear
    {% set newfailcounter = (printer["gcode_macro PRINT_START"].failcounter|int) %}
    {% set newswapcounter = (printer["gcode_macro PRINT_START"].swapcounter|int) %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=failcounter VALUE={newfailcounter}
    M118 Issue Number {newfailcounter|int}
    M118 Print Complete. Swaps:{newswapcounter|int}  Interventions: {newfailcounter|int}
    M117 Print Complete. Swaps:{newswapcounter|int}  Interventions: {newfailcounter|int}
    {% if unload|int ==1%}
      _ERCF_UNLOAD_TOOL
    {% endif %}
    BED_MESH_CLEAR
    STATUS_READY
    #LED_FLASH_WHITE_GREEN COUNT=10
    LED_RAINBOW
    
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  FILAMENT_SENSOR_DISABLE
  M106 S0
  CANCEL_PRINT_BASE
  G28 X Y
  SDCARD_RESET_FILE

[gcode_macro SMARTHOME]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        M118 Printer is already homed
    {% else %}
        M118 Printer needs homed...
        G28
    {% endif %}

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G0028 X
    # Move away
    G91
    G1 X10 F7200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G0028 Y
    # Move away
    G91
    G1 Y-10 F7200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    G1 X130 Y130 F3600
    G0028 Z
    G1 Z10

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
  


[gcode_macro M600]
gcode:
  G1 E-50 F300
  G1 E-50 F300
  G1 E-50 F300
  FILAMENT_SENSOR_DISABLE
  M117 paused for filament change
  PAUSE
  G1 E50 F300
  G1 E50 F300
  FILAMENT_SENSOR_DISABLE
  G1 E50 F300

[gcode_macro LED_WHITE]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED LED=led_strip RED=0.4 GREEN=0.4 BLUE=0.4

[gcode_macro LED_RED]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED LED=led_strip RED=1 GREEN=0 BLUE=0

[gcode_macro LED_GREEN]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED LED=led_strip RED=0 GREEN=1 BLUE=0

[gcode_macro LED_OFF]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED LED=led_strip RED=0 GREEN=0 BLUE=0



#[gcode_macro LED_LOOP]
#gcode:
#  {% for flashes in range(params.COUNT|int) %}
#    LED_OFF
#    G4 P250                       ; sleep 250ms
#    LED_RED
#    G4 P250                       ; sleep 250ms
#  {% endfor %}




[led_effect effect_led_rainbow]
autostart:              false
frame_rate:             12
leds:
    neopixel:led_strip
layers:
#   breathing  10 1 top (.5,.5,1)
    gradient  0.5 1 top (0.5, 0.0, 0.0),(0.0, 0.5, 0.0),(0.0, 0.0, 0.5)

[led_effect effect_led_chase]
autostart:              false
frame_rate:             24
leds:
    neopixel:led_strip
layers:
#   breathing  10 1 top (.5,.5,1)
    chase  1 1 top (0.5, 0.0, 0.0),(0.0, 0.5, 0.0),(0.0, 0.0, 0.5)

[led_effect effect_led_red_comet]
autostart:              false
frame_rate:             24
leds:
    neopixel:led_strip
layers:
#   breathing  10 1 top (.5,.5,1)
    comet  1 1 top (1.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 0.0, 0.0)

[led_effect effect_led_heater]
autostart:              false
heater:                 heater_bed
frame_rate:             24
leds:
    neopixel:led_strip
layers:
#   breathing  10 1 top (.5,.5,1)
    heaterfire  1 0 top (0.7,0.7,0),(0.7,0,0)

[led_effect effect_led_error]
leds:
    neopixel:led_strip
layers:
    strobe         1  1.5   add        (0.7,  0.7, 0.7)
    breathing      2  0     difference (0.66, 0.0, 0.0)
    static         1  0     top        (0.7,  0.0, 0.0)
autostart:                             false
frame_rate:                            24
run_on_error:                          true

[gcode_macro LED_RAINBOW]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED_EFFECT EFFECT=effect_led_rainbow

[gcode_macro LED_CHASE]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED_EFFECT EFFECT=effect_led_chase

[gcode_macro LED_RED_COMET]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED_EFFECT EFFECT=effect_led_red_comet

[gcode_macro LED_HEATER]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED_EFFECT EFFECT=effect_led_heater

[gcode_macro LED_ERROR]
gcode:
  STOP_LED_EFFECTS LEDS="neopixel:led_strip"
  SET_LED_EFFECT EFFECT=effect_led_error

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
 BED_MESH_CALIBRATE_BASE{rawparams}
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False

[gcode_macro G28]
rename_existing: G0028
variable_homing:False
gcode:
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
 G0028{rawparams}
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False



## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [input_shaper]
#*# shaper_type_x = 2hump_ei
#*# shaper_freq_x = 74.4
#*# shaper_type_y = mzv
#*# shaper_freq_y = 38.6
#*#
#*# [probe]
#*# z_offset = -1.150
